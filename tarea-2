#include <iostream>
#include <stdlib.h>
#include<time.h>
#include <ctime>
#include <chrono>

using namespace std;

#define MAX 800

void fillMatrix(int a[MAX][MAX]){
    for(int i = 0; i < MAX; i++){
        for(int j = 0; j < MAX; j++){
            a[i][j] = rand()%10;
        }
    }
}

void printMatrix(int a[MAX][MAX]){
    for(int i = 0; i < MAX; i++){
        for(int j = 0; j < MAX; j++){
            cout << a[i][j] << "-";
        }
        cout << endl;
    }
    cout << endl;
}

void matrixProduct(int a[MAX][MAX],int b[MAX][MAX]){
    int res[MAX][MAX] = {0};
    for(int i = 0; i < MAX; ++i)
        for(int j = 0; j < MAX; ++j)
            for(int k = 0; k < MAX; ++k)
                res[i][j] += a[i][k] * b[k][j];
}

void matrixBlockProduct(int m1[MAX][MAX],int m2[MAX][MAX]){
    int res[MAX][MAX] = {0};
    int bloque = MAX/4;
    int temp = 0;
            for (int jj = 0; jj < MAX; jj += bloque) {
                for (int kk = 0; kk < MAX; kk += bloque) {
                    for (int i = 0; i < MAX; i++) {
                        for (int j = jj; j < ((jj + bloque) > MAX ? MAX : (jj + bloque)); j++) {
                            temp = 0;
                            for (int k = kk; k < ((kk + bloque) > MAX ? MAX : (kk + bloque)); k++) {
                                temp += m1[i][k] * m2[k][j];
                            }
                            res[i][j] += temp;
                        }
                    }
                }
            }
}


int main(){
    srand(time(NULL));
    int a[MAX][MAX];
    int b[MAX][MAX];
    fillMatrix(a);
    fillMatrix(b);
    unsigned t0, t1;
      t0 = clock();
    //matrixProduct(a,b);
    t1 = clock();
    double time = (double(t1 - t0) / CLOCKS_PER_SEC);
    cout<<"Normal Matrix Product: " << time << endl;
    t0 = clock();
    matrixBlockProduct(a,b);
    t1 = clock();
    time = (double(t1-t0)/CLOCKS_PER_SEC);
    cout<< "Matrix Product by Block: " << time << endl;
    return 0;
}
